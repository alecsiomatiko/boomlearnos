const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

// Cargar variables de entorno manualmente
function loadEnv() {
  const envPath = path.join(__dirname, '../.env.local');
  const envContent = fs.readFileSync(envPath, 'utf8');
  const lines = envContent.split('\n');
  lines.forEach(line => {
    line = line.trim();
    if (line && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      const value = valueParts.join('=').replace(/^["']|["']$/g, '');
      if (key && value) process.env[key] = value;
    }
  });
}

loadEnv();

async function fixMod1Questions() {
    console.log('‚úÖ Variables de entorno cargadas');
    console.log('üîß MOVIENDO PREGUNTAS DEL M√ìDULO 1 DE MOD13 A MOD1');
    console.log('==================================================');

    let connection;
    try {
        // Conectar a MySQL
        connection = await mysql.createConnection({
            host: process.env.DB_HOST,
            user: process.env.DB_USER,
            password: process.env.DB_PASSWORD,
            database: process.env.DB_NAME,
            port: process.env.DB_PORT || 3306
        });
        console.log('‚úÖ Conectado a MySQL');

        // Primero verificar la estructura de las tablas
        const [moduleColumns] = await connection.execute(`DESCRIBE diagnostic_modules`);
        console.log('üîç Columnas en diagnostic_modules:');
        moduleColumns.forEach(col => console.log(`   ${col.Field} (${col.Type})`));

        const [submoduleColumns] = await connection.execute(`DESCRIBE diagnostic_submodules`);
        console.log('üîç Columnas en diagnostic_submodules:');
        submoduleColumns.forEach(col => console.log(`   ${col.Field} (${col.Type})`));

        // 1. Obtener informaci√≥n del MOD1 y su subm√≥dulo
        const [mod1Info] = await connection.execute(`
            SELECT id, module_code, title
            FROM diagnostic_modules 
            WHERE module_code = 'MOD1'
            LIMIT 1
        `);

        if (mod1Info.length === 0) {
            throw new Error('No se encontr√≥ el M√ìDULO 1');
        }

        const [submodules] = await connection.execute(`
            SELECT id, submodule_code, title 
            FROM diagnostic_submodules 
            WHERE module_id = ?
        `, [mod1Info[0].id]);

        if (submodules.length === 0) {
            throw new Error('No se encontr√≥ subm√≥dulo para el M√ìDULO 1');
        }

        console.log(`üéØ M√ìDULO 1: ${mod1Info[0].title} (${mod1Info[0].module_code})`);
        console.log(`üìÇ Subm√≥dulo: ${submodules[0].title} (${submodules[0].submodule_code})`);

        // 2. Buscar preguntas con c√≥digo m1s que est√°n en otros m√≥dulos
        const [wrongQuestions] = await connection.execute(`
            SELECT dq.id, dq.question_code as code, dq.question_text as text, dq.submodule_id,
                   dm.title as current_module_title, dm.module_code as current_module_code,
                   ds.title as current_submodule_title, ds.submodule_code as current_submodule_code
            FROM diagnostic_questions dq
            JOIN diagnostic_submodules ds ON dq.submodule_id = ds.id
            JOIN diagnostic_modules dm ON ds.module_id = dm.id
            WHERE dq.question_code LIKE 'm1s%' AND ds.module_id != ?
            ORDER BY dq.question_code
        `, [mod1Info[0].id]);

        if (wrongQuestions.length === 0) {
            console.log('‚úÖ No hay preguntas del M√ìDULO 1 en m√≥dulos incorrectos');
            return;
        }

        console.log(`\nüìù Encontradas ${wrongQuestions.length} preguntas del M√ìDULO 1 en m√≥dulo incorrecto:`);
        wrongQuestions.forEach(q => {
            console.log(`   ${q.code}: ${q.text.substring(0, 50)}...`);
            console.log(`   üìÅ Actualmente en: ${q.current_module_code} - ${q.current_submodule_code}`);
        });

        // 3. Mover las preguntas al subm√≥dulo correcto del MOD1
        console.log(`\nüîÑ Moviendo preguntas al M√ìDULO 1...`);
        
        for (const question of wrongQuestions) {
            await connection.execute(`
                UPDATE diagnostic_questions 
                SET submodule_id = ?
                WHERE id = ?
            `, [submodules[0].id, question.id]);
            
            console.log(`‚úÖ Movida: ${question.code} ‚Üí MOD1`);
        }

        // 4. Verificar el resultado
        const [mod1Questions] = await connection.execute(`
            SELECT dq.id, dq.question_code as code, dq.question_text as text
            FROM diagnostic_questions dq
            JOIN diagnostic_submodules ds ON dq.submodule_id = ds.id
            JOIN diagnostic_modules dm ON ds.module_id = dm.id
            WHERE dm.id = ?
            ORDER BY dq.question_code
        `, [mod1Info[0].id]);

        console.log(`\nüéâ RESULTADO FINAL:`);
        console.log(`üìä El M√ìDULO 1 ahora tiene ${mod1Questions.length} preguntas:`);
        mod1Questions.forEach(q => {
            console.log(`   ‚úÖ ${q.code}: ${q.text.substring(0, 60)}...`);
        });

    } catch (error) {
        console.error('‚ùå Error:', error.message);
        throw error;
    } finally {
        if (connection) {
            await connection.end();
            console.log('üîå Conexi√≥n cerrada');
        }
    }
}

// Ejecutar el script
fixMod1Questions().catch(console.error);
